syntax = "proto3";

package subscription;

option go_package = "tsubs.v1;subs";
import "google/api/annotations.proto";
import "protoc-gen-openapiv2/options/annotations.proto";

option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_swagger) = {
  info: {
    title: "Subscription API";
    version: "1.0";
    description: "API for managing user subscriptions.";
    contact: {
      name: "Support Team";
      url: "https://yourdomain.com";
      email: "support@yourdomain.com";
    }
  };
  schemes: HTTPS;
  consumes: "application/json";
  produces: "application/json";
};

service Subscription {
  rpc Subscribe (SubsRequest) returns (SubsResponse) {
    option (google.api.http) = {
      post: "/v1/subscription"
      body: "*"
    };
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      summary: "Subscribe user to a plan"
      description: "Creates a new subscription for the user based on the plan ID provided."
    };
  }

  rpc ChangeSubsPlan (ChangePlanRequest) returns (ChangePlanResponse) {
    option (google.api.http) = {
      put: "/v1/subscription/plan"
      body: "*"
    };
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      summary: "Change user subscription plan"
      description: "Updates the user's active subscription to a new plan."
    };
  }

  rpc Unsubscribe (UnSubsRequest) returns (UnSubsResponse) {
    option (google.api.http) = {
      delete: "/v1/subscription"
    };
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      summary: "Unsubscribe"
      description: "Cancels the user's current subscription."
    };
  }

  rpc GetSubDetails (GetSubRequest) returns (GetSubResponse) {
    option (google.api.http) = {
      get: "/v1/subscription"
    };
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      summary: "Get subscription details"
      description: "Returns the details of the current active subscription."
    };
  }

  rpc CheckSubscription (CheckSubsRequest) returns (CheckSubsResponse) {
    option (google.api.http) = {
      get: "/v1/subscription/check"
    };
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      summary: "Check if user is subscribed"
      description: "Returns the status of the user's subscription."
    };
  }

  rpc ListPlans (PlansRequest) returns (PlansResponse) {
    option (google.api.http) = {
      get: "/v1/subscription/plans"
    };
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      summary: "List all plans"
      description: "Retrieves all available subscription plans."
    };
  }

  rpc ExtractFromBalance (ExtractFromBalanceRequest) returns (ExtractFromBalanceResponse) {
    option (google.api.http) = {
      patch: "/v1/subscription/extract"
      body: "*"
    };
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      summary: "Deduct from subscription balance"
      description: "Subtracts a specified value from the subscription's remaining limit."
    };
  }

  rpc AddToBalance (AddToBalanceRequest) returns (AddToBalanceResponse) {
    option (google.api.http) = {
      patch: "/v1/subscription/add"
      body: "*"
    };
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      summary: "Add to subscription balance"
      description: "Increments the subscription's remaining limit."
    };
  }
}




service SubscriptionService {
  rpc Subscribe (SubsRequest) returns (SubsResponse);
  rpc ChangeSubsPlan (ChangePlanRequest) returns (ChangePlanResponse);
  rpc Unsubscribe (UnSubsRequest) returns (UnSubsResponse);
  rpc GetSubDetails (GetSubRequest) returns (GetSubResponse);
  rpc CheckSubscription (CheckSubsRequest) returns (CheckSubsResponse);
  rpc ListPlans (PlansRequest) returns (PlansResponse);
  rpc AddToBalance (AddToBalanceRequest) returns (AddToBalanceResponse);
  rpc ExtractFromBalance (ExtractFromBalanceRequest) returns (ExtractFromBalanceResponse);
}

enum Status {
  STATUS_OK = 0;
  STATUS_INVALID_PLAN = 1;
  STATUS_INVALID_USER = 2;
  STATUS_ALREADY_SUBSCRIBED = 3;
  STATUS_SUBSCRIPTION_NOTFOUND = 4;
  STATUS_INTERNAL_ERROR = 5;
  STATUS_SUBSCRIBED = 6;
  STATUS_NOT_SUBSCRIBED = 7;
}

enum Duration {
  DURATION_UNSPECIFIED = 0;
  DURATION_1_MONTH = 1;
  DURATION_3_MONTHS = 3;
  DURATION_6_MONTHS = 6;
  DURATION_12_MONTHS = 12;
}

message SubsRequest {
  int32 plan_id = 1;
}

message SubsResponse {
  int64 sub_id = 1;
  Status status = 2;
}

message ChangePlanRequest {
  int32 new_plan_id = 1;
}

message ChangePlanResponse {
  Status status = 1;
}

message UnSubsRequest {}

message UnSubsResponse {
  Status status = 1;
}

message GetSubRequest {}

message GetSubResponse {
  int64 user_id = 1;
  int32 plan_id = 2;
  string plan_name = 3;
  int32 remaining_limit = 4;
  string expires_at = 5;
}

message CheckSubsRequest {}

message CheckSubsResponse {
  Status sub_status = 1;
}

message PlansRequest {}

message PlansResponse {
  repeated Plan plans = 1;
}

message Plan {
  int32 plan_id = 1;
  string name = 2;
  string description = 3;
  int32 rental_limit = 4;
  int32 price = 5;
  Duration duration = 6; // "1/3/6/12 месяцев"
}

message ExtractFromBalanceRequest {
  int64 value = 1;
}

message ExtractFromBalanceResponse {
  Status opStatus = 1;
  string msg = 2;
  int64 left = 3;
}

message AddToBalanceRequest {
  int64 value = 1;
}

message AddToBalanceResponse{
  Status opStatus = 1;
  string msg = 2;
  int64 left = 3;
}