// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             (unknown)
// source: subscription/subscription.proto

package subs

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	Subscription_Subscribe_FullMethodName          = "/subscription.Subscription/Subscribe"
	Subscription_ChangeSubsPlan_FullMethodName     = "/subscription.Subscription/ChangeSubsPlan"
	Subscription_Unsubscribe_FullMethodName        = "/subscription.Subscription/Unsubscribe"
	Subscription_GetSubDetails_FullMethodName      = "/subscription.Subscription/GetSubDetails"
	Subscription_CheckSubscription_FullMethodName  = "/subscription.Subscription/CheckSubscription"
	Subscription_ListPlans_FullMethodName          = "/subscription.Subscription/ListPlans"
	Subscription_ExtractFromBalance_FullMethodName = "/subscription.Subscription/ExtractFromBalance"
	Subscription_AddToBalance_FullMethodName       = "/subscription.Subscription/AddToBalance"
)

// SubscriptionClient is the client API for Subscription service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type SubscriptionClient interface {
	Subscribe(ctx context.Context, in *SubsRequest, opts ...grpc.CallOption) (*SubsResponse, error)
	ChangeSubsPlan(ctx context.Context, in *ChangePlanRequest, opts ...grpc.CallOption) (*ChangePlanResponse, error)
	Unsubscribe(ctx context.Context, in *UnSubsRequest, opts ...grpc.CallOption) (*UnSubsResponse, error)
	GetSubDetails(ctx context.Context, in *GetSubRequest, opts ...grpc.CallOption) (*GetSubResponse, error)
	CheckSubscription(ctx context.Context, in *CheckSubsRequest, opts ...grpc.CallOption) (*CheckSubsResponse, error)
	ListPlans(ctx context.Context, in *PlansRequest, opts ...grpc.CallOption) (*PlansResponse, error)
	ExtractFromBalance(ctx context.Context, in *ExtractFromBalanceRequest, opts ...grpc.CallOption) (*ExtractFromBalanceResponse, error)
	AddToBalance(ctx context.Context, in *AddToBalanceRequest, opts ...grpc.CallOption) (*AddToBalanceResponse, error)
}

type subscriptionClient struct {
	cc grpc.ClientConnInterface
}

func NewSubscriptionClient(cc grpc.ClientConnInterface) SubscriptionClient {
	return &subscriptionClient{cc}
}

func (c *subscriptionClient) Subscribe(ctx context.Context, in *SubsRequest, opts ...grpc.CallOption) (*SubsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SubsResponse)
	err := c.cc.Invoke(ctx, Subscription_Subscribe_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *subscriptionClient) ChangeSubsPlan(ctx context.Context, in *ChangePlanRequest, opts ...grpc.CallOption) (*ChangePlanResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ChangePlanResponse)
	err := c.cc.Invoke(ctx, Subscription_ChangeSubsPlan_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *subscriptionClient) Unsubscribe(ctx context.Context, in *UnSubsRequest, opts ...grpc.CallOption) (*UnSubsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UnSubsResponse)
	err := c.cc.Invoke(ctx, Subscription_Unsubscribe_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *subscriptionClient) GetSubDetails(ctx context.Context, in *GetSubRequest, opts ...grpc.CallOption) (*GetSubResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetSubResponse)
	err := c.cc.Invoke(ctx, Subscription_GetSubDetails_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *subscriptionClient) CheckSubscription(ctx context.Context, in *CheckSubsRequest, opts ...grpc.CallOption) (*CheckSubsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CheckSubsResponse)
	err := c.cc.Invoke(ctx, Subscription_CheckSubscription_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *subscriptionClient) ListPlans(ctx context.Context, in *PlansRequest, opts ...grpc.CallOption) (*PlansResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(PlansResponse)
	err := c.cc.Invoke(ctx, Subscription_ListPlans_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *subscriptionClient) ExtractFromBalance(ctx context.Context, in *ExtractFromBalanceRequest, opts ...grpc.CallOption) (*ExtractFromBalanceResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ExtractFromBalanceResponse)
	err := c.cc.Invoke(ctx, Subscription_ExtractFromBalance_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *subscriptionClient) AddToBalance(ctx context.Context, in *AddToBalanceRequest, opts ...grpc.CallOption) (*AddToBalanceResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(AddToBalanceResponse)
	err := c.cc.Invoke(ctx, Subscription_AddToBalance_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// SubscriptionServer is the server API for Subscription service.
// All implementations must embed UnimplementedSubscriptionServer
// for forward compatibility.
type SubscriptionServer interface {
	Subscribe(context.Context, *SubsRequest) (*SubsResponse, error)
	ChangeSubsPlan(context.Context, *ChangePlanRequest) (*ChangePlanResponse, error)
	Unsubscribe(context.Context, *UnSubsRequest) (*UnSubsResponse, error)
	GetSubDetails(context.Context, *GetSubRequest) (*GetSubResponse, error)
	CheckSubscription(context.Context, *CheckSubsRequest) (*CheckSubsResponse, error)
	ListPlans(context.Context, *PlansRequest) (*PlansResponse, error)
	ExtractFromBalance(context.Context, *ExtractFromBalanceRequest) (*ExtractFromBalanceResponse, error)
	AddToBalance(context.Context, *AddToBalanceRequest) (*AddToBalanceResponse, error)
	mustEmbedUnimplementedSubscriptionServer()
}

// UnimplementedSubscriptionServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedSubscriptionServer struct{}

func (UnimplementedSubscriptionServer) Subscribe(context.Context, *SubsRequest) (*SubsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Subscribe not implemented")
}
func (UnimplementedSubscriptionServer) ChangeSubsPlan(context.Context, *ChangePlanRequest) (*ChangePlanResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ChangeSubsPlan not implemented")
}
func (UnimplementedSubscriptionServer) Unsubscribe(context.Context, *UnSubsRequest) (*UnSubsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Unsubscribe not implemented")
}
func (UnimplementedSubscriptionServer) GetSubDetails(context.Context, *GetSubRequest) (*GetSubResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSubDetails not implemented")
}
func (UnimplementedSubscriptionServer) CheckSubscription(context.Context, *CheckSubsRequest) (*CheckSubsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CheckSubscription not implemented")
}
func (UnimplementedSubscriptionServer) ListPlans(context.Context, *PlansRequest) (*PlansResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListPlans not implemented")
}
func (UnimplementedSubscriptionServer) ExtractFromBalance(context.Context, *ExtractFromBalanceRequest) (*ExtractFromBalanceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ExtractFromBalance not implemented")
}
func (UnimplementedSubscriptionServer) AddToBalance(context.Context, *AddToBalanceRequest) (*AddToBalanceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddToBalance not implemented")
}
func (UnimplementedSubscriptionServer) mustEmbedUnimplementedSubscriptionServer() {}
func (UnimplementedSubscriptionServer) testEmbeddedByValue()                      {}

// UnsafeSubscriptionServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to SubscriptionServer will
// result in compilation errors.
type UnsafeSubscriptionServer interface {
	mustEmbedUnimplementedSubscriptionServer()
}

func RegisterSubscriptionServer(s grpc.ServiceRegistrar, srv SubscriptionServer) {
	// If the following call pancis, it indicates UnimplementedSubscriptionServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&Subscription_ServiceDesc, srv)
}

func _Subscription_Subscribe_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SubsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SubscriptionServer).Subscribe(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Subscription_Subscribe_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SubscriptionServer).Subscribe(ctx, req.(*SubsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Subscription_ChangeSubsPlan_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ChangePlanRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SubscriptionServer).ChangeSubsPlan(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Subscription_ChangeSubsPlan_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SubscriptionServer).ChangeSubsPlan(ctx, req.(*ChangePlanRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Subscription_Unsubscribe_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UnSubsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SubscriptionServer).Unsubscribe(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Subscription_Unsubscribe_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SubscriptionServer).Unsubscribe(ctx, req.(*UnSubsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Subscription_GetSubDetails_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetSubRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SubscriptionServer).GetSubDetails(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Subscription_GetSubDetails_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SubscriptionServer).GetSubDetails(ctx, req.(*GetSubRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Subscription_CheckSubscription_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CheckSubsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SubscriptionServer).CheckSubscription(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Subscription_CheckSubscription_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SubscriptionServer).CheckSubscription(ctx, req.(*CheckSubsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Subscription_ListPlans_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PlansRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SubscriptionServer).ListPlans(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Subscription_ListPlans_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SubscriptionServer).ListPlans(ctx, req.(*PlansRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Subscription_ExtractFromBalance_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ExtractFromBalanceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SubscriptionServer).ExtractFromBalance(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Subscription_ExtractFromBalance_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SubscriptionServer).ExtractFromBalance(ctx, req.(*ExtractFromBalanceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Subscription_AddToBalance_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddToBalanceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SubscriptionServer).AddToBalance(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Subscription_AddToBalance_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SubscriptionServer).AddToBalance(ctx, req.(*AddToBalanceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Subscription_ServiceDesc is the grpc.ServiceDesc for Subscription service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Subscription_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "subscription.Subscription",
	HandlerType: (*SubscriptionServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Subscribe",
			Handler:    _Subscription_Subscribe_Handler,
		},
		{
			MethodName: "ChangeSubsPlan",
			Handler:    _Subscription_ChangeSubsPlan_Handler,
		},
		{
			MethodName: "Unsubscribe",
			Handler:    _Subscription_Unsubscribe_Handler,
		},
		{
			MethodName: "GetSubDetails",
			Handler:    _Subscription_GetSubDetails_Handler,
		},
		{
			MethodName: "CheckSubscription",
			Handler:    _Subscription_CheckSubscription_Handler,
		},
		{
			MethodName: "ListPlans",
			Handler:    _Subscription_ListPlans_Handler,
		},
		{
			MethodName: "ExtractFromBalance",
			Handler:    _Subscription_ExtractFromBalance_Handler,
		},
		{
			MethodName: "AddToBalance",
			Handler:    _Subscription_AddToBalance_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "subscription/subscription.proto",
}

const (
	SubscriptionService_Subscribe_FullMethodName          = "/subscription.SubscriptionService/Subscribe"
	SubscriptionService_ChangeSubsPlan_FullMethodName     = "/subscription.SubscriptionService/ChangeSubsPlan"
	SubscriptionService_Unsubscribe_FullMethodName        = "/subscription.SubscriptionService/Unsubscribe"
	SubscriptionService_GetSubDetails_FullMethodName      = "/subscription.SubscriptionService/GetSubDetails"
	SubscriptionService_CheckSubscription_FullMethodName  = "/subscription.SubscriptionService/CheckSubscription"
	SubscriptionService_ListPlans_FullMethodName          = "/subscription.SubscriptionService/ListPlans"
	SubscriptionService_AddToBalance_FullMethodName       = "/subscription.SubscriptionService/AddToBalance"
	SubscriptionService_ExtractFromBalance_FullMethodName = "/subscription.SubscriptionService/ExtractFromBalance"
)

// SubscriptionServiceClient is the client API for SubscriptionService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type SubscriptionServiceClient interface {
	Subscribe(ctx context.Context, in *SubsRequest, opts ...grpc.CallOption) (*SubsResponse, error)
	ChangeSubsPlan(ctx context.Context, in *ChangePlanRequest, opts ...grpc.CallOption) (*ChangePlanResponse, error)
	Unsubscribe(ctx context.Context, in *UnSubsRequest, opts ...grpc.CallOption) (*UnSubsResponse, error)
	GetSubDetails(ctx context.Context, in *GetSubRequest, opts ...grpc.CallOption) (*GetSubResponse, error)
	CheckSubscription(ctx context.Context, in *CheckSubsRequest, opts ...grpc.CallOption) (*CheckSubsResponse, error)
	ListPlans(ctx context.Context, in *PlansRequest, opts ...grpc.CallOption) (*PlansResponse, error)
	AddToBalance(ctx context.Context, in *AddToBalanceRequest, opts ...grpc.CallOption) (*AddToBalanceResponse, error)
	ExtractFromBalance(ctx context.Context, in *ExtractFromBalanceRequest, opts ...grpc.CallOption) (*ExtractFromBalanceResponse, error)
}

type subscriptionServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewSubscriptionServiceClient(cc grpc.ClientConnInterface) SubscriptionServiceClient {
	return &subscriptionServiceClient{cc}
}

func (c *subscriptionServiceClient) Subscribe(ctx context.Context, in *SubsRequest, opts ...grpc.CallOption) (*SubsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SubsResponse)
	err := c.cc.Invoke(ctx, SubscriptionService_Subscribe_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *subscriptionServiceClient) ChangeSubsPlan(ctx context.Context, in *ChangePlanRequest, opts ...grpc.CallOption) (*ChangePlanResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ChangePlanResponse)
	err := c.cc.Invoke(ctx, SubscriptionService_ChangeSubsPlan_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *subscriptionServiceClient) Unsubscribe(ctx context.Context, in *UnSubsRequest, opts ...grpc.CallOption) (*UnSubsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UnSubsResponse)
	err := c.cc.Invoke(ctx, SubscriptionService_Unsubscribe_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *subscriptionServiceClient) GetSubDetails(ctx context.Context, in *GetSubRequest, opts ...grpc.CallOption) (*GetSubResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetSubResponse)
	err := c.cc.Invoke(ctx, SubscriptionService_GetSubDetails_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *subscriptionServiceClient) CheckSubscription(ctx context.Context, in *CheckSubsRequest, opts ...grpc.CallOption) (*CheckSubsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CheckSubsResponse)
	err := c.cc.Invoke(ctx, SubscriptionService_CheckSubscription_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *subscriptionServiceClient) ListPlans(ctx context.Context, in *PlansRequest, opts ...grpc.CallOption) (*PlansResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(PlansResponse)
	err := c.cc.Invoke(ctx, SubscriptionService_ListPlans_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *subscriptionServiceClient) AddToBalance(ctx context.Context, in *AddToBalanceRequest, opts ...grpc.CallOption) (*AddToBalanceResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(AddToBalanceResponse)
	err := c.cc.Invoke(ctx, SubscriptionService_AddToBalance_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *subscriptionServiceClient) ExtractFromBalance(ctx context.Context, in *ExtractFromBalanceRequest, opts ...grpc.CallOption) (*ExtractFromBalanceResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ExtractFromBalanceResponse)
	err := c.cc.Invoke(ctx, SubscriptionService_ExtractFromBalance_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// SubscriptionServiceServer is the server API for SubscriptionService service.
// All implementations must embed UnimplementedSubscriptionServiceServer
// for forward compatibility.
type SubscriptionServiceServer interface {
	Subscribe(context.Context, *SubsRequest) (*SubsResponse, error)
	ChangeSubsPlan(context.Context, *ChangePlanRequest) (*ChangePlanResponse, error)
	Unsubscribe(context.Context, *UnSubsRequest) (*UnSubsResponse, error)
	GetSubDetails(context.Context, *GetSubRequest) (*GetSubResponse, error)
	CheckSubscription(context.Context, *CheckSubsRequest) (*CheckSubsResponse, error)
	ListPlans(context.Context, *PlansRequest) (*PlansResponse, error)
	AddToBalance(context.Context, *AddToBalanceRequest) (*AddToBalanceResponse, error)
	ExtractFromBalance(context.Context, *ExtractFromBalanceRequest) (*ExtractFromBalanceResponse, error)
	mustEmbedUnimplementedSubscriptionServiceServer()
}

// UnimplementedSubscriptionServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedSubscriptionServiceServer struct{}

func (UnimplementedSubscriptionServiceServer) Subscribe(context.Context, *SubsRequest) (*SubsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Subscribe not implemented")
}
func (UnimplementedSubscriptionServiceServer) ChangeSubsPlan(context.Context, *ChangePlanRequest) (*ChangePlanResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ChangeSubsPlan not implemented")
}
func (UnimplementedSubscriptionServiceServer) Unsubscribe(context.Context, *UnSubsRequest) (*UnSubsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Unsubscribe not implemented")
}
func (UnimplementedSubscriptionServiceServer) GetSubDetails(context.Context, *GetSubRequest) (*GetSubResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSubDetails not implemented")
}
func (UnimplementedSubscriptionServiceServer) CheckSubscription(context.Context, *CheckSubsRequest) (*CheckSubsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CheckSubscription not implemented")
}
func (UnimplementedSubscriptionServiceServer) ListPlans(context.Context, *PlansRequest) (*PlansResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListPlans not implemented")
}
func (UnimplementedSubscriptionServiceServer) AddToBalance(context.Context, *AddToBalanceRequest) (*AddToBalanceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddToBalance not implemented")
}
func (UnimplementedSubscriptionServiceServer) ExtractFromBalance(context.Context, *ExtractFromBalanceRequest) (*ExtractFromBalanceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ExtractFromBalance not implemented")
}
func (UnimplementedSubscriptionServiceServer) mustEmbedUnimplementedSubscriptionServiceServer() {}
func (UnimplementedSubscriptionServiceServer) testEmbeddedByValue()                             {}

// UnsafeSubscriptionServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to SubscriptionServiceServer will
// result in compilation errors.
type UnsafeSubscriptionServiceServer interface {
	mustEmbedUnimplementedSubscriptionServiceServer()
}

func RegisterSubscriptionServiceServer(s grpc.ServiceRegistrar, srv SubscriptionServiceServer) {
	// If the following call pancis, it indicates UnimplementedSubscriptionServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&SubscriptionService_ServiceDesc, srv)
}

func _SubscriptionService_Subscribe_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SubsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SubscriptionServiceServer).Subscribe(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SubscriptionService_Subscribe_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SubscriptionServiceServer).Subscribe(ctx, req.(*SubsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SubscriptionService_ChangeSubsPlan_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ChangePlanRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SubscriptionServiceServer).ChangeSubsPlan(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SubscriptionService_ChangeSubsPlan_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SubscriptionServiceServer).ChangeSubsPlan(ctx, req.(*ChangePlanRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SubscriptionService_Unsubscribe_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UnSubsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SubscriptionServiceServer).Unsubscribe(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SubscriptionService_Unsubscribe_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SubscriptionServiceServer).Unsubscribe(ctx, req.(*UnSubsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SubscriptionService_GetSubDetails_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetSubRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SubscriptionServiceServer).GetSubDetails(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SubscriptionService_GetSubDetails_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SubscriptionServiceServer).GetSubDetails(ctx, req.(*GetSubRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SubscriptionService_CheckSubscription_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CheckSubsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SubscriptionServiceServer).CheckSubscription(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SubscriptionService_CheckSubscription_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SubscriptionServiceServer).CheckSubscription(ctx, req.(*CheckSubsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SubscriptionService_ListPlans_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PlansRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SubscriptionServiceServer).ListPlans(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SubscriptionService_ListPlans_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SubscriptionServiceServer).ListPlans(ctx, req.(*PlansRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SubscriptionService_AddToBalance_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddToBalanceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SubscriptionServiceServer).AddToBalance(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SubscriptionService_AddToBalance_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SubscriptionServiceServer).AddToBalance(ctx, req.(*AddToBalanceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SubscriptionService_ExtractFromBalance_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ExtractFromBalanceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SubscriptionServiceServer).ExtractFromBalance(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SubscriptionService_ExtractFromBalance_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SubscriptionServiceServer).ExtractFromBalance(ctx, req.(*ExtractFromBalanceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// SubscriptionService_ServiceDesc is the grpc.ServiceDesc for SubscriptionService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var SubscriptionService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "subscription.SubscriptionService",
	HandlerType: (*SubscriptionServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Subscribe",
			Handler:    _SubscriptionService_Subscribe_Handler,
		},
		{
			MethodName: "ChangeSubsPlan",
			Handler:    _SubscriptionService_ChangeSubsPlan_Handler,
		},
		{
			MethodName: "Unsubscribe",
			Handler:    _SubscriptionService_Unsubscribe_Handler,
		},
		{
			MethodName: "GetSubDetails",
			Handler:    _SubscriptionService_GetSubDetails_Handler,
		},
		{
			MethodName: "CheckSubscription",
			Handler:    _SubscriptionService_CheckSubscription_Handler,
		},
		{
			MethodName: "ListPlans",
			Handler:    _SubscriptionService_ListPlans_Handler,
		},
		{
			MethodName: "AddToBalance",
			Handler:    _SubscriptionService_AddToBalance_Handler,
		},
		{
			MethodName: "ExtractFromBalance",
			Handler:    _SubscriptionService_ExtractFromBalance_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "subscription/subscription.proto",
}
